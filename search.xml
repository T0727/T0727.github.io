<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/01/01/hello-world/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="922b5ed3972e75283095df7a9e671e0c7326bb971116d59f2393d4cefa46087a">9728cbf04bc470bf7d4e9187166291254f03c0becf178b3f283de91350504a196723d6cb7854e09e231d50662c70a2c94f0a1b9e2e1b697bbc6ef5596ac88854e5b3976fd9e6f1a857a77294a62c1567187b1d193075462c76c3891eba986067f48115070735f94e37dfba754020e731b709be1711fe92b27ad482f40111bfac337797cfe4ea3244da749edcd905e8fe5240e8f416dd9bbaeb8acd5f5b4e178b88065195b6aaa2e1913b5f81f26ebb50388fb9fd793e208fc8ed72504d2ec5216b214cbf846516abfa5d2ab121f327f33e24cc5b642f359c755f1cab0149bebc862565728c9fb99659dc2c4bdd47c031e6edc43082b6b0815add29ae7eaaed84987459551297faab063d3f9f8fd65765efd343f3e762cc07df620d71aa7d23b8de30bcceb3cac93cd8ecc10b2da66c1b7cb399fba4e68878f81ad32d7b32815b24f9e07d773b06ee2684090ea52d18198df85d06ba9dc56bf18b159216b6d9463b2615a8f5707519dd9d0fc2c4074bb80a30a0c7cac362f7d1aee9a20758c9a6dedfcf6efa3fc7c468ca861b5d4c3e285bfbd384616bfb4ae5cf1ebd4e0a09079ecb48018a62622d409bb0423f2652dd1d817ab4502a338d9238efa6c7a725c53c4926ad2e6b7662310b0a9681bf37eec9bb311866b1b65cca652d5a674c626888ddca9f52197925477df97edd8c76a8d32fc40c9a077590ec07291373548e880f45a9ae53af7e0f955e659a2a852ba5278345fde813d11e90985992e869a879421fd6d04e6d0eb048ad4677a93e809814cc047e21d1866b188e1cd034622d84fffbbde689656f2d2763b4c58193cbfa3bf8251960fce7a788374d26c906753e2f47441f0b3bab9aede0e95e491871d3ffb4a226d4a59bf5410aa7c7927cc2734878581b9e3ee17a55e227c243b678891ec0fb64d12bc5efa5366362836a9fe26be90140fe59c53e764a956bca8b130003df9a2f42798621d424fb706a990c58837d40cec13a30b8d13f1c9d6599a18f59178fe3cae95a01c0ecb208d1d4e88d938ca190815988672600e2383d3b7c83c5185c5411e28788267692e2fe53524f8473425facc3cd23b634316cf2a57fe930b24cb5f7b9f6042fe6d647aa7ae202c367044ec7d7b5e288e11d7c82def53dfdca04bbd587c16c1c526681ef487de8ae1cef08cff8ace64ca5baaf09961fc963b40de32f51186a8c3c9258d6c13ceaccef4b8c6a19330a9ba94b7e193ebe350ac92aaf549a09a9ed6206ee4bd6a42b5ca62d0372c3f17ef8ad7dd00d33e5e200f5560d91801b8ffb6676a68c128684b923b0c6fe00eb3765756749fb25a59c1cbe019cd54c9885bb4640464fdbc6f065209f485f40ec6be20119f31fc9ae1d5c289b11d878e8039717a48f6f384e76e47616253e3d3adea21759df2cdd7395862413e8b1edea0aa41d164a31d4a9e1c1f8cbc9c38f15dbcb1c1d666c59512eff72f6d0d6fcdd40f8fc4d586566702595c15062a7f911a0f76244c1d6d86d359d09812b2f7f0085fe0230e12c713bdfe54684ede1a13a6343dfcf9441c4bc16914d87fad4015ba70c787df22080b415084351e0abe1bb4e8a122bc56e8f60ce7f5ad58f985d2b4d5e110eb49f05e8d19e314b7f6fbccf28b232109e090775927176a9cf498d6d9ea369e226b8a33e186f29da564a0d7ee1b1d35f83aa95ac93f6a9a402062cb1352a49cdf2bf94604c738e234455de5a09e2b4bc64f3bcac4c78327807850fc6a2f2b4d8c5048a04ced71070570c3d6e4e6b10fb269ee34d246e363292814b60d2868d6d7f5adb18fd1d2ece3a6eb484891e5db881a0e4d507eb153c575901b0b17a363b25cd736ebb8fcaf69d905fbda4a070329464e27cbad53113ad5ffcc2302f2728c399d587ce9e16abe7bfd621dc62c5c89d5c9e37da1dfc7ea59ba131d178d5c6abc9328b195d204f484d6b474f2949e9233301fef43418298d51d414f1de2d90358367e316f42139e9500d66f7c0d688a9ab99d7846f285c22560fa3585f15199451e6bb2205f1f314340e22c1619332e7412e9b6b1d446d3d081646c61524222ae36f5fa0f50ddaf67b56718bff4b2dd4d7de5f979f8ac57ee6e241775031ba948106e422f43bbc1b813ae0712127880b9ae7bec9ce92b240c684fe75517ebb86d7fdc8d1ff78322201fd072af1d322fa13239f0b2aead22d92670f6eb00299dcf1d0f0a9015de4b1404d8935a4e69c8f0bc737a43e2bbf92be53486bc27a47c625eb5ccb4ea1f754ac9e0d889e26aa2c09c497ef5a8d9b045d4fadf1d06d49d8e7f893360657a352e94e03c91206aab871d222ab5219a3a3944f74b7079b7235225564d88df2122c23c174b9bfdc0b2f51d9fbd3f81ce82bc7875ce6cab76bc3bc72eb471c20ed7b09b4c36c00baac2cd3972f6dea01e4d026f429459ddeb9c2fc0cd60e384bb1c7c2ffd689c00bb64ad917925f4f0e2241c7d94c16d02590a4156ce848641ec7dde4d6b2d2506c7dc25c938c3704c4c66e2005759538c8295f2ba51827eb799322533869a42218332fafc6a4e76fbf201d8fc05c288f7cb05e567aefa2d0b8dfa9eca9b4630365a8d40ced473b9966bfc3101f242643b9363f3b141177078a75a4c35c33498e0aee30a09c1a7cd06173ec1c8e49711264e716d47abde0b11d6ea250b5c7919b808b2694c9ec3e4343ecb3aafc4cbe653c284de2dbfe873df751347161cb55dbfafe69b86c5a5f1b6e3b6f5213aabb3a177b6f22704d72632b579c29c2a5781833aa0f7d78fe9053c775b1d7cb315b801cd75c0ccfa1347a522942eb514df03799b2ea1ad87e21258466665dc3ee609fc4a2974ddb13f0b9aedb717741264f23247380931b36bb01608192ab0bf959e4f663901fe3d2e001ba682c5d17674595ba8f1a895becf3844a2e154a61d9aaebc11d1ce5ac5be74ea95f8788fc68afe7c02591af2305d214d282619a1978d2a81629ef16d5b378f819711477f1f1f2df6a32e42dafbc9c585baf011a7aae1130f6e7dd6f04eacfc1ff8e4e9d9411244bbda2fcd60b6b8f62fd69a0b187a2883c161b98f541f09102cfea9b632127223050f1ca2c87cb3e5c15df26f425dcc1292fee074e5cbfb41ea06b8e1b055d5642b484a2ff1955ba73f04bd387cba9cc143140230d840938bfbc240b6f62904e6caa9f288371cd5c94c2f34db888d43b21d2f9ba92fb327a4af0c1b81556336a1d33ec7d2dccf8bc74685850b1a7bac1e46dc164b262950f7ea10cd2c539718c0d1a553f643126bd524b24a600278baacd91ab20c1520f8d6b971000d622b01fd9c289eaf4c42041d30d1fdc5560daf70ccf5da9f505c414ea4bcfd7a8cd8cf5728bcbfd2476657a4bce370f4ff3929e2acfbcb83b35960ab9941558b6b1b1f40e478b92384867e64f4547d4694b4350f998a6063164affcae947c05481f1cbb91f628c6e6226b1a5a89b837622ef013c0b909c6bc155a0946e3e6a0607fb180f38fd5549dceac7c58987a0aa8b730c752baa253da7e7721a9910eb878c7b123968ac6c7aa3ed7da40e7e63c640e26435f54eae7fba570d0258719201d610aaa693d82f56a7c551d26acdcd35c45b4d2a1ed51092878052cabf4ef8eb328c55eaa8394309cc1aebb838dee442030a11651fa24bb55a0dbbc4d19677371aadcd60d035bfe87b4a6ba32a63d0656346dd2d027232f1a4e0222e23b6ff6255810c4a67b0d596ac5b7f4afc46a4133dd274585680e67a66df4e23bd649970d5e3b131b75e13320374257ccbd1d20131a982f858fc31984f15269d9af917c242df3031e78d5c5bd6c0fa2d56c77c13c4263ad5cc30d45ef3cab260d6f05a8788f7267bcc478c4a78c95b93d93661db3c4d2d2194d287c445eddaa77afe8494f982341c4ea00314c60742c60cb917ae2a78fb37419099d30fd2b30942762ca1738ff02b535672645eb75e2267254951f1bc42776072e542695ac4cb1de6f337a4d1eb44d1ca4707b245e5a478c44e910b3fd299d4c03c74e7d6560d3e58a5f33c38cf1b51ecfd73dce2a297f813f2d106071281806ba38c63da5b3d0608e34f42463214f9a30ec019e03ca01034ad0c6116ec062a37e731bc4aef7db30456a7ffa22604617ab33b3c4ddd00e87ff1fb966089f4156dad72ee3ca7d35664d96a5a60b3f0c32b12e661af586b9607c874e8320c29a70b57f372465a8c7b29fdd3f33400cd8a25c828fda82871f1b607d0902dbd82e085cd9bb27cbbaa6c08649a0febfa54d17e82f2f104c29261a724b6a04fc2532e6967b2d31b47d3a4ea896c7dc65b60923df95370e2e9752eee15f8a461fe9905f3c93a8d0d31ee8a8d6a6daa7bb43f4ecb3712d9eee1b3101d9448b02ea07052263b6d93d1b52</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot应用中，启动时执行一些特定的代码</title>
    <url>/2024/11/01/SpringBoot%E5%BA%94%E7%94%A8%E4%B8%AD%EF%BC%8C%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%A7%E8%A1%8C%E4%B8%80%E4%BA%9B%E7%89%B9%E5%AE%9A%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h3 id="1-使用CommandLineRunner接口"><a href="#1-使用CommandLineRunner接口" class="headerlink" title="1. 使用CommandLineRunner接口"></a>1. 使用<code>CommandLineRunner</code>接口</h3><p>创建一个实现<code>CommandLineRunner</code>接口的Bean，然后在该Bean的<code>run</code>方法中执行您的代码。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStartupRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 启动时执行的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;应用启动，执行初始化代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-使用ApplicationRunner接口"><a href="#2-使用ApplicationRunner接口" class="headerlink" title="2. 使用ApplicationRunner接口"></a>2. 使用<code>ApplicationRunner</code>接口</h3><p>与<code>CommandLineRunner</code>类似，但<code>ApplicationRunner</code>提供了更丰富的参数类型。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 启动时执行的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;应用启动，执行初始化代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-使用-PostConstruct注解"><a href="#3-使用-PostConstruct注解" class="headerlink" title="3. 使用@PostConstruct注解"></a>3. 使用<code>@PostConstruct</code>注解</h3><p>在Bean的初始化方法上使用<code>@PostConstruct</code>注解，当Spring容器创建该Bean后，会立即调用该方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 启动时执行的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Bean初始化，执行代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-监听ApplicationEvent"><a href="#4-监听ApplicationEvent" class="headerlink" title="4. 监听ApplicationEvent"></a>4. 监听<code>ApplicationEvent</code></h3><p>创建一个事件监听器来监听<code>ApplicationStartedEvent</code>或<code>ApplicationReadyEvent</code>。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.event.ApplicationReadyEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ApplicationReadyEvent&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationReadyEvent event)</span> &#123;</span><br><span class="line">        <span class="comment">// 启动时执行的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;应用准备好，执行代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<blockquote>
<p>​		如果需要在Spring容器完全启动并且上下文准备好后再执行代码，推荐使用<code>ApplicationRunner</code>或<code>CommandLineRunner</code>。如果代码需要在Bean创建后立即执行，则可以使用<code>@PostConstruct</code>。</p>
</blockquote>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>git环境搭建</title>
    <url>/2024/11/06/git%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="1、Git快速入门"><a href="#1、Git快速入门" class="headerlink" title="1、Git快速入门"></a>1、Git快速入门</h1><h2 id="1-1-软件下载"><a href="#1-1-软件下载" class="headerlink" title="1.1 软件下载"></a>1.1 软件下载</h2><p>软件官网地址：<a class="link"   href="https://git-scm.com/" >https://git-scm.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>软件下载地址为：<a class="link"   href="https://github.com/git-for-windows/git/releases/download/v2.40.0.windows.1/Git-2.40.0-64-bit.exe" >https://github.com/git-for-windows/git/releases/download/v2.40.0.windows.1/Git-2.40.0-64-bit.exe <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="1-2-软件安装"><a href="#1-2-软件安装" class="headerlink" title="1.2 软件安装"></a>1.2 软件安装</h2><p>下载后，直接双击下一步即可。（可根据自己的喜好选择安装目录）</p>
<h2 id="1-3-软件测试"><a href="#1-3-软件测试" class="headerlink" title="1.3 软件测试"></a>1.3 软件测试</h2><p>在桌面空白处右击，查看弹框中是否有Git相关菜单选项。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/image-20241107141040537.png"
                      alt="image-20241107141040537"
                ></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
